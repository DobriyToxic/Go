package main

import (
	"fmt"
)

// Map применяет переданную функцию к каждому элементу среза и возвращает новый срез.
// Аргументы:
// - input: исходный срез значений типа float64.
// - fn: функция, которая принимает одно значение типа float64 и возвращает результат преобразования.
func Map(input []float64, fn func(float64) float64) []float64 {
	// Создаем новый срез для хранения результатов.
	result := make([]float64, len(input))

	// Проходим по каждому элементу исходного среза.
	for i, value := range input {
		// Применяем функцию fn к текущему элементу и сохраняем результат в новый срез.
		result[i] = fn(value)
	}
	// Возвращаем новый срез с преобразованными значениями.
	return result
}

func main() {
	// Определяем анонимную функцию для возведения числа в квадрат.
	// Эта функция принимает число x типа float64 и возвращает x * x.
	square := func(x float64) float64 {
		return x * x
	}

	// Создаем исходный срез чисел.
	numbers := []float64{1.0, 2.0, 3.0, 4.0, 5.0}

	// Применяем функцию Map с исходным срезом numbers и функцией square.
	// Возвращаемый новый срез сохраняем в переменной result.
	result := Map(numbers, square)

	// Выводим исходный срез, чтобы убедиться, что он не изменился.
	fmt.Println("Исходный срез:", numbers)

	// Выводим новый срез, полученный после применения функции Map.
	fmt.Println("Срез после применения Map:", result)
}
