package main

import (
	"fmt"
	"sync"
)

// count читает числа из канала ch, вычисляет их квадраты и выводит результат.
// Когда канал закрывается и данные в нем заканчиваются, функция завершает работу.
// wg используется для синхронизации завершения работы горутины.
func count(ch <-chan int, wg *sync.WaitGroup) {
	defer wg.Done() // Уменьшаем счетчик WaitGroup, чтобы сигнализировать о завершении работы горутины.

	for num := range ch { // Читаем числа из канала, пока он не закрыт.
		fmt.Println(num * num) // Выводим квадрат текущего числа.
	}
}

func main() {
	// Создаем канал для передачи данных между горутинами.
	ch := make(chan int)

	// Создаем объект sync.WaitGroup для синхронизации горутин.
	var wg sync.WaitGroup

	// Увеличиваем счетчик WaitGroup, так как запускаем одну горутину.
	wg.Add(1)

	// Запускаем горутину, которая будет читать данные из канала и обрабатывать их.
	go count(ch, &wg)

	// Отправляем числа от 1 до 5 в канал.
	for i := 1; i <= 5; i++ {
		ch <- i // Отправка числа в канал.
	}

	// Закрываем канал, чтобы сигнализировать горутине, что данные больше не будут поступать.
	close(ch)

	// Ожидаем завершения всех горутин перед завершением основной программы.
	wg.Wait()
}
